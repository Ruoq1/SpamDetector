# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HNzCd6ETVO6hvA95JQUbdeoHnwosJ1Wm
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import svm
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

# Loading the spam_ham_dataset.csv
df = pd.read_csv('/content/drive/MyDrive/dataset.csv')
stop_words = set(stopwords.words('english'))

# preprocess
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'\W', ' ', text)
    text = re.sub(r'\s+', ' ', text)
    words = text.split()
    words = [word for word in words if word not in stop_words]
    return ' '.join(words)

df['processed_text'] = df['content'].apply(preprocess_text)

X = df['processed_text']  # Features (processed text)
y = df['label']  # Labels (spam/ham)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# TF-IDF
tfidf_vectorizer = TfidfVectorizer(max_features=2000)
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# SVM classifier
svm_classifier = svm.SVC(kernel='linear')
svm_classifier.fit(X_train_tfidf, y_train)

# Predictions
y_pred = svm_classifier.predict(X_test_tfidf)

# Evaluation
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Print evaluation metrics
print(f'Accuracy: {accuracy:.4f}')
print(f'Precision: {precision:.4f}')
print(f'Recall: {recall:.4f}')
print(f'F1 Score: {f1:.4f}')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import re
import nltk
from nltk.corpus import stopwords
import gensim
from gensim.models import Word2Vec
import numpy as np

nltk.download('stopwords')
stop_words = set(stopwords.words('english'))

df = pd.read_csv('/content/drive/MyDrive/dataset.csv')

# Preprocessing (same as before)
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'\W', ' ', text)  # remove non-word characters
    text = re.sub(r'\s+', ' ', text)  # remove extra spaces
    words = text.split()
    words = [word for word in words if word not in stop_words]
    return words

df['processed_text'] = df['content'].apply(preprocess_text)

# splitting the data into training and test sets
X = df['processed_text']  # Features (features are processed text as tokenized words)
y = df['label']  # Labels (spam/ham)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# training the Word2Vec model on the training data
word2vec_model = Word2Vec(sentences=X_train, vector_size=100, window=5, min_count=1, workers=4)

# converts each email into a Word2Vec vector
def vectorize_text(text, model, size):
    vec = np.zeros(size)
    count = 0
    for word in text:
        if word in model.wv.key_to_index:
            vec += model.wv[word]
            count += 1
    if count > 0:
        vec /= count
    return vec

# Convert the emails to word vectors
X_train_word2vec = np.array([vectorize_text(text, word2vec_model, 100) for text in X_train])
X_test_word2vec = np.array([vectorize_text(text, word2vec_model, 100) for text in X_test])

# training the classifier on the Word2Vec vectors
svm_classifier = svm.SVC(kernel='linear')
svm_classifier.fit(X_train_word2vec, y_train)

# Make predictions and evaluate the model
y_pred_word2vec = svm_classifier.predict(X_test_word2vec)

# model evaluation part
accuracy = accuracy_score(y_test, y_pred_word2vec)
precision = precision_score(y_test, y_pred_word2vec)
recall = recall_score(y_test, y_pred_word2vec)
f1 = f1_score(y_test, y_pred_word2vec)

print(f'Word2Vec - Accuracy: {accuracy:.4f}')
print(f'Word2Vec - Precision: {precision:.4f}')
print(f'Word2Vec - Recall: {recall:.4f}')
print(f'Word2Vec - F1 Score: {f1:.4f}')